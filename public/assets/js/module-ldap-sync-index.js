"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright Â© 2017-2023 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global globalRootUrl, globalTranslate, Form, PbxApi */

/**
 * ModuleLdapSyncModify
 *
 * This object handles the functionality of synchronizing LDAP users and
 * other related features.
 */
var ModuleLdapSyncIndex = {
  $autoSyncStatuses: $('.checkbox.server-sync-status'),
  initialize: function initialize() {
    // Enable/disable server checkbox handlers
    ModuleLdapSyncIndex.$autoSyncStatuses.checkbox({
      onChecked: function onChecked() {
        var id = $(this).closest('tr').attr('id');
        $.api({
          url: "".concat(globalRootUrl, "module-ldap-sync/module-ldap-sync/enable/{id}"),
          on: 'now',
          urlData: {
            id: id
          },
          onSuccess: function onSuccess(response) {
            if (response.success) {
              $("#".concat(id, " .status-dependent")).removeClass('disabled');
            }
          }
        });
      },
      onUnchecked: function onUnchecked() {
        var id = $(this).closest('tr').attr('id');
        $.api({
          url: "".concat(globalRootUrl, "module-ldap-sync/module-ldap-sync/disable/{id}"),
          on: 'now',
          urlData: {
            id: id
          },
          onSuccess: function onSuccess(response) {
            if (response.success) {
              $("#".concat(id, " .status-dependent")).addClass('disabled');
            }
          }
        });
      }
    });
  }
};
$(document).ready(function () {
  ModuleLdapSyncIndex.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGUtbGRhcC1zeW5jLWluZGV4LmpzIl0sIm5hbWVzIjpbIk1vZHVsZUxkYXBTeW5jSW5kZXgiLCIkYXV0b1N5bmNTdGF0dXNlcyIsIiQiLCJpbml0aWFsaXplIiwiY2hlY2tib3giLCJvbkNoZWNrZWQiLCJpZCIsImNsb3Nlc3QiLCJhdHRyIiwiYXBpIiwidXJsIiwiZ2xvYmFsUm9vdFVybCIsIm9uIiwidXJsRGF0YSIsIm9uU3VjY2VzcyIsInJlc3BvbnNlIiwic3VjY2VzcyIsInJlbW92ZUNsYXNzIiwib25VbmNoZWNrZWQiLCJhZGRDbGFzcyIsImRvY3VtZW50IiwicmVhZHkiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFNQSxtQkFBbUIsR0FBRztBQUN4QkMsRUFBQUEsaUJBQWlCLEVBQUNDLENBQUMsQ0FBQyw4QkFBRCxDQURLO0FBRXhCQyxFQUFBQSxVQUZ3Qix3QkFFWjtBQUNSO0FBQ0FILElBQUFBLG1CQUFtQixDQUFDQyxpQkFBcEIsQ0FDS0csUUFETCxDQUNjO0FBQ05DLE1BQUFBLFNBRE0sdUJBQ007QUFDUixZQUFNQyxFQUFFLEdBQUdKLENBQUMsQ0FBQyxJQUFELENBQUQsQ0FBUUssT0FBUixDQUFnQixJQUFoQixFQUFzQkMsSUFBdEIsQ0FBMkIsSUFBM0IsQ0FBWDtBQUNBTixRQUFBQSxDQUFDLENBQUNPLEdBQUYsQ0FBTTtBQUNGQyxVQUFBQSxHQUFHLFlBQUtDLGFBQUwsa0RBREQ7QUFFRkMsVUFBQUEsRUFBRSxFQUFFLEtBRkY7QUFHRkMsVUFBQUEsT0FBTyxFQUFFO0FBQ0xQLFlBQUFBLEVBQUUsRUFBRkE7QUFESyxXQUhQO0FBTUZRLFVBQUFBLFNBTkUscUJBTVFDLFFBTlIsRUFNa0I7QUFDaEIsZ0JBQUlBLFFBQVEsQ0FBQ0MsT0FBYixFQUFzQjtBQUNsQmQsY0FBQUEsQ0FBQyxZQUFLSSxFQUFMLHdCQUFELENBQThCVyxXQUE5QixDQUEwQyxVQUExQztBQUNIO0FBQ0o7QUFWQyxTQUFOO0FBWUgsT0FmSztBQWdCTkMsTUFBQUEsV0FoQk0seUJBZ0JRO0FBQ1YsWUFBTVosRUFBRSxHQUFHSixDQUFDLENBQUMsSUFBRCxDQUFELENBQVFLLE9BQVIsQ0FBZ0IsSUFBaEIsRUFBc0JDLElBQXRCLENBQTJCLElBQTNCLENBQVg7QUFDQU4sUUFBQUEsQ0FBQyxDQUFDTyxHQUFGLENBQU07QUFDRkMsVUFBQUEsR0FBRyxZQUFLQyxhQUFMLG1EQUREO0FBRUZDLFVBQUFBLEVBQUUsRUFBRSxLQUZGO0FBR0ZDLFVBQUFBLE9BQU8sRUFBRTtBQUNMUCxZQUFBQSxFQUFFLEVBQUZBO0FBREssV0FIUDtBQU1GUSxVQUFBQSxTQU5FLHFCQU1RQyxRQU5SLEVBTWtCO0FBQ2hCLGdCQUFJQSxRQUFRLENBQUNDLE9BQWIsRUFBc0I7QUFDbEJkLGNBQUFBLENBQUMsWUFBS0ksRUFBTCx3QkFBRCxDQUE4QmEsUUFBOUIsQ0FBdUMsVUFBdkM7QUFDSDtBQUNKO0FBVkMsU0FBTjtBQVlIO0FBOUJLLEtBRGQ7QUFpQ0g7QUFyQ3VCLENBQTVCO0FBd0NBakIsQ0FBQyxDQUFDa0IsUUFBRCxDQUFELENBQVlDLEtBQVosQ0FBa0IsWUFBTTtBQUNwQnJCLEVBQUFBLG1CQUFtQixDQUFDRyxVQUFwQjtBQUNILENBRkQiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTWlrb1BCWCAtIGZyZWUgcGhvbmUgc3lzdGVtIGZvciBzbWFsbCBidXNpbmVzc1xuICogQ29weXJpZ2h0IMKpIDIwMTctMjAyMyBBbGV4ZXkgUG9ydG5vdiBhbmQgTmlrb2xheSBCZWtldG92XG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLlxuICogSWYgbm90LCBzZWUgPGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqL1xuXG4vKiBnbG9iYWwgZ2xvYmFsUm9vdFVybCwgZ2xvYmFsVHJhbnNsYXRlLCBGb3JtLCBQYnhBcGkgKi9cblxuLyoqXG4gKiBNb2R1bGVMZGFwU3luY01vZGlmeVxuICpcbiAqIFRoaXMgb2JqZWN0IGhhbmRsZXMgdGhlIGZ1bmN0aW9uYWxpdHkgb2Ygc3luY2hyb25pemluZyBMREFQIHVzZXJzIGFuZFxuICogb3RoZXIgcmVsYXRlZCBmZWF0dXJlcy5cbiAqL1xuY29uc3QgTW9kdWxlTGRhcFN5bmNJbmRleCA9IHtcbiAgICAkYXV0b1N5bmNTdGF0dXNlczokKCcuY2hlY2tib3guc2VydmVyLXN5bmMtc3RhdHVzJyksXG4gICAgaW5pdGlhbGl6ZSgpe1xuICAgICAgICAvLyBFbmFibGUvZGlzYWJsZSBzZXJ2ZXIgY2hlY2tib3ggaGFuZGxlcnNcbiAgICAgICAgTW9kdWxlTGRhcFN5bmNJbmRleC4kYXV0b1N5bmNTdGF0dXNlc1xuICAgICAgICAgICAgLmNoZWNrYm94KHtcbiAgICAgICAgICAgICAgICBvbkNoZWNrZWQoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gJCh0aGlzKS5jbG9zZXN0KCd0cicpLmF0dHIoJ2lkJyk7XG4gICAgICAgICAgICAgICAgICAgICQuYXBpKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogYCR7Z2xvYmFsUm9vdFVybH1tb2R1bGUtbGRhcC1zeW5jL21vZHVsZS1sZGFwLXN5bmMvZW5hYmxlL3tpZH1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgb246ICdub3cnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsRGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uU3VjY2VzcyhyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoYCMke2lkfSAuc3RhdHVzLWRlcGVuZGVudGApLnJlbW92ZUNsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25VbmNoZWNrZWQoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gJCh0aGlzKS5jbG9zZXN0KCd0cicpLmF0dHIoJ2lkJyk7XG4gICAgICAgICAgICAgICAgICAgICQuYXBpKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogYCR7Z2xvYmFsUm9vdFVybH1tb2R1bGUtbGRhcC1zeW5jL21vZHVsZS1sZGFwLXN5bmMvZGlzYWJsZS97aWR9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uOiAnbm93JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybERhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBvblN1Y2Nlc3MocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKGAjJHtpZH0gLnN0YXR1cy1kZXBlbmRlbnRgKS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgfVxufVxuXG4kKGRvY3VtZW50KS5yZWFkeSgoKSA9PiB7XG4gICAgTW9kdWxlTGRhcFN5bmNJbmRleC5pbml0aWFsaXplKCk7XG59KTsiXX0=